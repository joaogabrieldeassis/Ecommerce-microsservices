// <auto-generated />
using System;
using EShop.Catalog.Infrestructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EShop.Catalog.Infrestructure.Migrations
{
    [DbContext(typeof(CatalogContext))]
    partial class CatalogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EShop.Catalog.Domain.Models.ProductCatalog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableStock")
                        .HasColumnType("int");

                    b.Property<Guid>("CatalogBrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxStockThreshold")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(28, 2)
                        .HasColumnType("decimal(28,2)");

                    b.Property<Guid>("ProductCatalogBrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RestockThreshold")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCatalogBrandId");

                    b.ToTable("CatalogItens", (string)null);
                });

            modelBuilder.Entity("EShop.Catalog.Domain.Models.ProductCatalogBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CatalogBrands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            Brand = "Nike"
                        },
                        new
                        {
                            Id = new Guid("edef3c70-38fb-44b1-8028-e620c42b6c6f"),
                            Brand = "Adidas"
                        },
                        new
                        {
                            Id = new Guid("e42a20db-bd93-4897-829f-a2b436ceff7c"),
                            Brand = "Louis Vuitton"
                        });
                });

            modelBuilder.Entity("EShop.Catalog.Domain.Models.ProductCatalog", b =>
                {
                    b.HasOne("EShop.Catalog.Domain.Models.ProductCatalogBrand", "ProductCatalogBrand")
                        .WithMany()
                        .HasForeignKey("ProductCatalogBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCatalogBrand");
                });
#pragma warning restore 612, 618
        }
    }
}
